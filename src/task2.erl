%% --------------------------------------------------------------------------------
%% File:    task2.erl
%% @author  Oleksii Semilietov <spylik@gmail.com>
%%
%% @doc Task2:
%% Each new term in the Fibonacci sequence is generated by adding the previous two terms. By 
%% starting with 1 and 2, the first 10 terms will be:
%% 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
%% By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
%% find the sum of the even-valued terms.
%% --------------------------------------------------------------------------------

-module(task2).

-define(NOTEST, true).
-ifdef(TEST).
    -compile(export_all).
-endif.

-export([default/0]).

% @doc hardcoded values and specs for test task.
% By default we going to calculate sum of the even fibonacci numbers 
% that do not exceed 4 000 000
-spec default() -> Result when
    Result :: 4613732. % we can hardcode spec cuz we using hardcoded parameter

default() -> sum_even_fib(4000000).

% @doc calculate sum of the even fibonacci numbers tht do not exceed TopRange 
-spec sum_even_fib(TopRange) -> Result when
    TopRange :: integer(),
    Result :: non_neg_integer().

sum_even_fib(TopRange) -> sum_even_fib(TopRange, TopRange>1, 0, 1, 0).

% @doc main fibonacci even numbers calculating recursion
-spec sum_even_fib(TopRange, ReachRange, Fib1, Fib2, EvenSum) -> Result when
    TopRange :: integer(),
    ReachRange :: boolean(),
    Fib1 :: non_neg_integer(),
    Fib2 :: pos_integer(),
    EvenSum :: non_neg_integer(),
    Result :: non_neg_integer().

sum_even_fib(_, false, _, _, Sum) -> Sum;
sum_even_fib(TopRange, true, N1, N2, Sum) when N1 rem 2 =/= 0 -> 
    sum_even_fib(TopRange, TopRange>N2, N2, N1 + N2, Sum);
sum_even_fib(TopRange, true, N1, N2, Sum) when N1 rem 2 =:= 0 -> 
    sum_even_fib(TopRange, TopRange>N2, N2, N1 + N2, Sum + N1).
